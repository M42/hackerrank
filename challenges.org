#+TITLE: Programming Challenges
#+AUTHOR: Mario Rom√°n

* Algorithms
** Sorting
*** Bubble sort
An average performance of ${\cal O}(n^2)$.

**** C++ Implementation
#+BEGIN_SRC cpp :cmdline <<< '9 5 7 3 6 2 8 4 1'
  #include<iostream>
  #include<vector>
  using namespace std;

  void bubblesort(vector<int>& arr) {
    for (unsigned i=0; i<arr.size(); i++) {
      for (unsigned j=0; j<arr.size()-i-1; j++) {
        if (arr[j] > arr[j+1]) {
          int swap = arr[j];
          arr[j] = arr[j+1];
          arr[j+1] = swap;
        }
      }
    }
  }


  int main() {
    vector<int> numbers;
    int read;

    while (cin >> read) {
      numbers.push_back(read);
    }

    bubblesort(numbers);

    for (int n : numbers) {
      cout << n << " ";
    }
  }
#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7 8 9

*** Quicksort
An average performance of ${\cal O}(n \log(n))$, but the worst-case performance is of ${\cal O}(n^2)$.

**** C++ Implementation
#+BEGIN_SRC cpp :cmdline <<< '9 5 7 3 6 2 8 4 1'
  #include<iostream>
  #include<vector>
  using namespace std;

  void quicksort(vector<int>& numbers, int left, int right) {
    if (left >= right)
      return;

    int i = left+1;
    int j = right;
    int pivot = numbers[left];

    while (i <= j) {
      while (numbers[i] < pivot)
        i++;
      while (numbers[j] > pivot)
        j--;
      if (i < j) {
        int swap = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = swap;
      }
    }

    numbers[left] = numbers[j];
    numbers[j] = pivot;
    quicksort(numbers, left, j-1);
    quicksort(numbers, j+1, right);
  }

  int main() {
    int read;
    vector<int> numbers;
    while (cin >> read)
      numbers.push_back(read);

    quicksort(numbers,0,numbers.size()-1);

    for (int n : numbers)
      cout << n << " ";
  }
#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7 8 9

**** Haskell Implementation
#+BEGIN_SRC haskell :results output
  input :: [Int]
  input = [9,5,8,3,7,4,1,2,6]

  quicksort :: (Ord a) => [a] -> [a]
  quicksort [] = []
  quicksort (x:xs) =
    quicksort (filter (<=x) xs) ++
    [x] ++
    quicksort (filter (>=x) xs)

  main :: IO ()
  main = do
    print $ quicksort input
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9]

*** Mergesort
**** C++ Implementation
Mergesort has an average performance of ${\cal O}(n \log(n))$, where $n$ is the size of the arrray.
We can compute that visualizing a diagram of mergesort. To merge a level into other is lineal
in time, and to sort a level depends on the numbers of levels below it; if we think of the
diagram as a tree, it has $\log(n)$ levels.
#+BEGIN_SRC cpp :cmdline <<< '8 6 2 4 7 1 5 9 3'
  #include<iostream>
  #include<vector>
  using namespace std;

  void merge(vector<int>& arr, int left, int middle, int right) {
    vector<int> auxiliar;
    for (int i=left; i<right; i++)
      auxiliar.push_back(arr[i]);

    int rel_left = left-left;
    int rel_right = right-left;
    int rel_middle = middle-left;
    int i = rel_left;
    int j = rel_middle;
    int a = left;

    while (i < rel_middle and j < rel_right) {
      if (auxiliar[i] < auxiliar[j]) {
        arr[a] = auxiliar[i];
        i++; a++;
      }
      else {
        arr[a] = auxiliar[j];
        j++; a++;
      }
    }

    while (i < rel_middle) {
      arr[a] = auxiliar[i];
      i++; a++;
    }

    while (j < rel_right) {
      arr[a] = auxiliar[j];
      j++; a++;
    }
  }

  void mergesort(vector<int>& arr, int left, int right) {
    if (left >= right-1)
      return;

    int middle = (left+right)/2;
    mergesort(arr, left, middle);
    mergesort(arr, middle, right);
    merge(arr, left, middle, right);
  }

  int main() {
    vector<int> numbers;
    int read;
    while (cin >> read)
      numbers.push_back(read);

    mergesort(numbers, 0, numbers.size());

    for (int n : numbers) {
      cout << n << " ";
    }
  }

#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7 8 9

**** Haskell implementation
#+BEGIN_SRC haskell :results output
  merge :: (Ord a) => [a] -> [a] -> [a]
  merge [] ys = ys
  merge xs [] = xs
  merge (x:xs) (y:ys)
      | x < y = x:(merge xs (y:ys))
      | otherwise = y:(merge (x:xs) ys)

  mergesort :: (Ord a) => [a] -> [a]
  mergesort [] = []
  mergesort [x] = [x]
  mergesort xs = merge (mergesort fs) (mergesort ls)
      where (fs,ls) = splitAt middle xs
            middle = div (length xs) 2

  main :: IO ()
  main = print $ mergesort input
  
  input :: [Int]
  input = [9,5,8,2,4,7,6,1,3,10]
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9,10]

*** Heapsort
It runs in ${\cal O}(n \log n)$.
**** Haskell library implementation
#+BEGIN_SRC haskell :results output
import Data.Heap as Heap

heapsort :: (Ord a) => [a] -> [a]
heapsort = Heap.sort

main :: IO ()
main = print $ heapsort input

input :: [Int]
input = [7,1,4,9,2,6,3,5,8]
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9]


* Hackerrank
** Data Structures
*** Heap
**** Find the running median
#+BEGIN_SRC c++
#include<iostream>
#include<iomanip>
#include<vector>

using namespace std;

bool lesst(int a,int b) {return a < b;}
bool moret(int a,int b) {return a > b;}


void insert(vector<int>& max_heap, bool (*compare)(int,int), int a) {
  max_heap.push_back(a);
  int pointer = max_heap.size()-1;
  int parent = (pointer-1)/2;
  
  while (pointer != 0 and compare(max_heap[parent],max_heap[pointer])) {
    int swap = max_heap[pointer];
    max_heap[pointer] = max_heap[parent];
    max_heap[parent] = swap;

    pointer = parent;
    parent = (pointer-1)/2;
  }
}


// compare < max_heap -> lesser
// compare > min_heap -> greater
int pop(vector<int>& max_heap, bool (*compare)(int,int)) {
  int result = max_heap[0];
  max_heap[0] = max_heap[max_heap.size()-1];
  max_heap.resize(max_heap.size()-1);
  unsigned pointer = 0;
  bool change_left =
    ((pointer*2+1) < max_heap.size()) and compare(max_heap[pointer], max_heap[pointer*2+1]);
  bool change_right =
    ((pointer*2+2) < max_heap.size()) and compare(max_heap[pointer], max_heap[pointer*2+2]);
  
  while (change_left or change_right) {
    if (change_left and change_right) {
      if (compare(max_heap[pointer*2+1],max_heap[pointer*2+2]))
	change_left = false;
      else
	change_right = false;
    }
    if (change_left) {
    int swap = max_heap[pointer];
      max_heap[pointer] = max_heap[pointer*2+1];
      max_heap[pointer*2+1] = swap;
      pointer = pointer*2+1;
    }
    else if (change_right) {
      int swap = max_heap[pointer];
      max_heap[pointer] = max_heap[pointer*2+2];
      max_heap[pointer*2+2] = swap;
      pointer = pointer*2+2;
    }

    change_left =
      ((pointer*2+1) < max_heap.size()) and compare(max_heap[pointer], max_heap[pointer*2+1]);
    change_right =
      ((pointer*2+2) < max_heap.size()) and compare(max_heap[pointer], max_heap[pointer*2+2]);
  }

  return result;
}

int main() {
  cout << fixed << setprecision(1);
  int n; cin >> n;
  vector<int> max_heap;
  vector<int> min_heap;
  float median = 0;
  int diff = 0;
  int read;

  // First element
  cin >> read;
  max_heap.push_back(read);
  median = read;
  diff = 1;
  cout << float(median) << endl;

  // All elements
  for (int i=0; i<n-1; i++) {
    // Inserts new element
    cin >> read;
    
    if (read >= median) {
      insert(min_heap,moret,read);
      if (min_heap.size() > max_heap.size())
	insert(max_heap,lesst,pop(min_heap,moret));
    }

    if (read < median) {
      insert(max_heap,lesst,read);
      if (max_heap.size() > min_heap.size()+1)
	insert(min_heap,moret,pop(max_heap,lesst));
    }
    
    // Recomputes median
    if (i%2 == 0)
      median = (max_heap[0] + min_heap[0])/2.0;
    else
      median = (max_heap[0]);
    cout << float(median) << endl;

    // cerr << "max: [";
    // for (unsigned i=0; i<max_heap.size();i++)
    //   cerr <<max_heap[i] << ",";
    // cerr << "]\n";
    // cerr << "min: [";
    // for (unsigned i=0; i<min_heap.size();i++)
    //   cerr <<min_heap[i] << ",";
    // cerr << "]\n";
  }
}
#+END_SRC

** Functional Programming
*** Introduction
**** Solve me first FP
#+BEGIN_SRC haskell
solveMeFirst a b = a + b

main = do
    val1 <- readLn
    val2 <- readLn
    let sum = solveMeFirst val1 val2
    print sum
#+END_SRC

**** Hello world
#+BEGIN_SRC haskell
hello_world = putStrLn "Hello World"
main = do
   hello_world
#+END_SRC

**** Hello world N times
#+BEGIN_SRC haskell
hello_worlds n = mapM_ putStrLn (replicate n "Hello World")
main = do
   n <- readLn :: IO Int
   hello_worlds n
#+END_SRC

**** List replication
#+BEGIN_SRC haskell
f n = concat . map (replicate n)
main = do
   n <- readLn :: IO Int
   inputdata <- getContents
   mapM_ putStrLn $ map show $ f n $ map (read :: String -> Int) $ lines inputdata
#+END_SRC
**** Filter Array
#+BEGIN_SRC haskell
f :: Int -> [Int] -> [Int]
f _ [] = [] 
f n (x:xs)
    | (x < n) = (x:(f n xs))
    | otherwise = f n xs

main = do 
    n <- readLn :: IO Int 
    inputdata <- getContents 
    let 
        numbers = map read (lines inputdata) :: [Int] 
    putStrLn . unlines $ (map show . f n) numbers
#+END_SRC
**** Filter Positions in a list
#+BEGIN_SRC haskell
f :: [Int] -> [Int]
f (x:xs) = g xs
f [] = []

g :: [Int] -> [Int]
g (x:xs) = x : (f xs)
g [] = []

main = do
   inputdata <- getContents
   mapM_ (putStrLn. show). f. map read. lines $ inputdata
#+END_SRC
**** Array of N elements
#+BEGIN_SRC haskell
fn n = [1..n]
#+END_SRC
**** Reverse a list
#+BEGIN_SRC haskell
  rev [] = []
  rev (x:xs) = (rev xs) ++ [x]

  main = do
    inputdata <- getContents
    mapM_ putStrLn $ map show $ rev $ map (read :: String -> Int) $ lines inputdata
#+END_SRC
**** Sum of Odd elements
#+BEGIN_SRC haskell
isOdd x = (mod x 2 == 1)
f = sum . (filter (isOdd))

main = do
   inputdata <- getContents
   putStrLn $ show $ f $ map (read :: String -> Int) $ lines inputdata
#+END_SRC
**** List Length
#+BEGIN_SRC haskell
  len :: [a] -> Int
  len lst = case lst of
              []     -> 0
              (x:xs) -> succ (len xs)

  main = do
    inputdata <- getContents
    putStrLn $ show $ len $ map (read :: String -> Int) $ lines inputdata
#+END_SRC
**** Update List
#+BEGIN_SRC haskell
f = map abs
main = do
   inputdata <- getContents
   mapM_ putStrLn $ map show $ f $ map (read :: String -> Int) $ lines inputdata
#+END_SRC
**** Evaluating e^x
#+BEGIN_SRC haskell
import Control.Applicative
import Control.Monad
import System.IO

main :: IO ()
main = do
    n_temp <- getLine
    let n = read n_temp :: Int
    forM_ [1..n] $ \a0  -> do
        x_temp <- getLine
        let x = read x_temp :: Double

getMultipleLines :: Int -> IO [String]
getMultipleLines n
    | n <= 0 = return []
    | otherwise = do          
        x <- getLine         
        xs <- getMultipleLines (n-1)    
        let ret = (x:xs)    
        return ret 
#+END_SRC
**** Functions or not?
#+BEGIN_SRC haskell
import Control.Monad
import Data.Char

allDifferent :: (Eq a) => [a] -> Bool
allDifferent [] = True
allDifferent (x:xs) = (notElem x xs) && (allDifferent xs)

isFunction :: (Eq a) => [(a,a)] -> Bool
isFunction l = allDifferent (map fst l)

main :: IO ()
main = do
  contents <- getContents
  let cases = parse contents
  let sols = map ((\x -> if x then "YES" else "NO") . isFunction) cases
  mapM_ putStrLn sols
  
parse :: String -> [[(Int,Int)]]
parse cnt = parseHead $ drop 1 (lines cnt)

parseHead :: [String] -> [[(Int,Int)]]
parseHead [] = []
parseHead (x:xs) = parseBody (take n xs) : parseHead (drop n xs)
  where n = read x

parseBody :: [String] -> [(Int,Int)]
parseBody = map ((\[a,b] -> (a,b)) . (map read) . words)
#+END_SRC
**** Compute the perimeter of a polygon
#+BEGIN_SRC haskell
perimeter :: [(Int,Int)] -> Float
perimeter l = sum $ map distance (pairs l)

pairs :: [a] -> [(a,a)]
pairs l = zip l (tail l ++ [head l])

distance :: ((Int,Int),(Int,Int)) -> Float
distance ((x,y),(v,w)) = sqrt . fromIntegral $ (x-v)^2 + (y-w)^2

main :: IO ()
main = do
  contents <- getContents
  let points = parseContents contents
  let perim = perimeter points
  print perim

parseContents :: String -> [(Int,Int)]
parseContents str = map ((\[a,b] -> (a,b)) . (map read) . words) (take (read n) ns)
  where n:ns = lines str
#+END_SRC
**** Compute the area of a polygon
#+BEGIN_SRC haskell
area :: [(Int,Int)] -> Float
area l = (fromIntegral (sum $ map (\((x,y),(v,w)) -> (x*w-y*v)) (pairs l))) * 0.5

pairs :: [a] -> [(a,a)]
pairs l = zip l (tail l ++ [head l])

main :: IO ()
main = do
  contents <- getContents
  let points = parseContents contents
  print $ (area points)

parseContents :: String -> [(Int,Int)]
parseContents str = map ((\[a,b] -> (a,b)) . (map read) . words) (take (read n) ns)
  where n:ns = lines str
#+END_SRC
*** Recursion
**** Computing the GCD
#+BEGIN_SRC haskell
module Main where

gcd' :: Integral a => a -> a -> a
gcd' a b
    | (b < a) = gcd'' a b
    | otherwise = gcd'' b a
    where
        gcd'' x 0 = x
        gcd'' x y = gcd'' y (rem x y)

main = do
  input <- getLine
  print . uncurry gcd' . listToTuple . convertToInt . words $ input
 where
  listToTuple (x:xs:_) = (x,xs)
  convertToInt = map (read :: String -> Int)
#+END_SRC
**** Fibonacci numbers
#+BEGIN_SRC haskell
module Main where

fib :: Int -> Int
fib n
    | (n==1) = 0
    | (n==2) = 1
    | otherwise = (fib (n-1)) + (fib (n-2))

main = do
    input <- getLine
    print . fib . (read :: String -> Int) $ input
#+END_SRC
**** Pascal's triangle
#+BEGIN_SRC haskell
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * (factorial (n-1))

binomial :: Int -> Int -> Int
binomial n r = quot (factorial n) ((factorial r) * (factorial (n-r)))

pascal :: Int -> [[Int]]
pascal n = map pascalfile [0..(n-1)]
  where
    pascalfile m = map (binomial m) [0..m]

main :: IO ()
main = do
  x <- getLine
  let n = read x :: Int
  let list = pascal n
  mapM_ putStrLn (map (unwords . (map show)) list)
  return ()
#+END_SRC
**** String-o-Permute
#+BEGIN_SRC haskell
import Control.Monad

permute :: String -> String
permute []       = []
permute (a:b:xs) = b:a:(permute xs)

main :: IO ()
main = do
  n <- readLn
  replicateM_ n (do
                    s <- getLine
                    putStrLn $ permute s
                )
#+END_SRC
**** String Compression
#+BEGIN_SRC haskell
compress :: String -> String
compress = compressacc (0,'0')
  where
    compressacc :: (Int,Char) -> String -> String
    compressacc (n,x) []
      | n == 0    = []
      | n == 1    = [x]
      | otherwise = x : show n
    compressacc (n,x) (y:ys)
      | x == y    = compressacc (succ n,x) ys
      | otherwise = compressacc (n,x) [] ++ compressacc (1,y) ys
  
main :: IO ()
main = do
  string <- getLine
  putStrLn $ compress string
#+END_SRC
**** Prefix Compression
#+BEGIN_SRC haskell
compression :: String -> String -> (String,String,String)
compression [] y = ([],[],y)
compression x [] = ([],x,[])
compression (x:xs) (y:ys)
    | x == y    = (x:a,b,c) 
    | otherwise = ([],x:xs,y:ys)
  where (a,b,c) = compression xs ys

linelen :: String -> String
linelen x = show (length x) ++ " " ++ x

main = do x <- getLine
          y <- getLine
          let (a,b,c) = compression x y
          putStrLn $ linelen a
          putStrLn $ linelen b
          putStrLn $ linelen c
#+END_SRC
**** String Reductions
#+BEGIN_SRC haskell
reduction :: Eq a => [a] -> [a]
reduction []    = []
reduction (x:xs)
    | elem x xs = reduction xs
    | otherwise = x:(reduction xs)

main :: IO ()
main = do x <- getLine
          putStr $ reverse (reduction (reverse x))
#+END_SRC
**** The Sums of Powers
#+BEGIN_SRC haskell
forms :: [Int] -> Int -> Int
forms _  0 = 1
forms [] _ = 0
forms (x:xs) g
  | g < x     = 0
  | otherwise = (forms xs g) + (forms xs (g-x))

sumpowers :: Int -> Int -> Int
sumpowers n e = forms (map (^e) [1..]) n

main :: IO ()
main = do
  n <- readLn :: IO Int
  e <- readLn :: IO Int
  putStrLn . show $ sumpowers n e
#+END_SRC
**** Super-Queens on a chessboard
#+BEGIN_SRC haskell
import Control.Monad
import Control.Applicative ((<$>))
import Data.Sequence as Seq

attack :: (Int,Int) -> (Int,Int) -> Bool
attack (xa,ya) (xb,yb)
  | ((abs (xa-xb) <= 2) && (abs (ya-yb) <= 2)) = True
  | (abs (xa-xb)) == (abs (ya-yb)) = True
  | otherwise = False

putQueen :: Int -> [(Int,Int)] -> Seq Bool -> Int -> Int
putQueen n prevqueens columns row = if n == row then 1 else sum $ do
  c <- [0..(n-1)]
  guard $ not $ index columns c
  guard $ not $ any (attack (row,c)) prevqueens
  return $ putQueen n ((row,c):prevqueens) (update c True columns) (succ row)

queens :: Int -> Int
queens n = putQueen n [] (Seq.replicate n False) 0

main :: IO ()
main = queens <$> readLn >>= print
#+END_SRC
**** Sequence full of colors
#+BEGIN_SRC haskell
import Control.Monad

fullcolorrec :: Int -> Int -> String -> Bool
fullcolorrec rg yb []       = (rg == 0) && (yb == 0)
fullcolorrec rg yb ('R':xs) = (rg <  1) && (fullcolorrec (rg+1) yb xs)
fullcolorrec rg yb ('G':xs) = (rg > -1) && (fullcolorrec (rg-1) yb xs)
fullcolorrec rg yb ('Y':xs) = (yb <  1) && (fullcolorrec rg (yb+1) xs)
fullcolorrec rg yb ('B':xs) = (yb > -1) && (fullcolorrec rg (yb-1) xs)


fullcolor :: String -> Bool
fullcolor = fullcolorrec 0 0 

main :: IO ()
main = do
  cases <- readLn
  replicateM_ cases (
    do
      chain <- getLine
      putStrLn . show $ fullcolor chain
    )
#+END_SRC
**** Filter Elements
#+BEGIN_SRC haskell
import Data.Map 
import Data.List
import Control.Monad

-- Counter
type Counter = Map Int Int

toCounter :: [Int] -> Counter
toCounter = Prelude.foldl add empty

add :: Counter -> Int -> Counter
add l x = insertWith (+) x 1 l
  

-- Filter
filterk :: [Int] -> Int -> [Int]
filterk l k = Data.List.nub $ Data.List.filter ((flip elem) (keys $ Data.Map.filter (>=k) (toCounter l))) l

showFilter :: [Int] -> String
showFilter [] = "-1"
showFilter xs = intercalate " " $ Data.List.map show xs

main = do
  cases <- readLn
  replicateM_ cases (
    do
      (n,k) <- fmap (\[a,b] -> (a,b)) $ fmap ((Data.List.map read) . words) getLine
      list <- fmap ((Data.List.map read) . words) getLine
      let filteredlist = filterk list k
      putStrLn $ showFilter filteredlist
    )
#+END_SRC
*** Functional Structures
**** Valid BST
#+BEGIN_SRC haskell
import Control.Monad

data BinTree a = Empty
               | Node a (BinTree a) (BinTree a)

insert :: (Ord a) => BinTree a -> a -> BinTree a
insert Empty x = Node x Empty Empty
insert (Node n lt rt) x
       | x > n = Node n lt (insert rt x)
       | x < n = Node n (insert lt x) rt

preorder :: BinTree a -> [a]
preorder Empty = []
preorder (Node n lt rt) = [n] ++ preorder lt ++ preorder rt

main :: IO ()
main = do cases <- readLn :: IO Int
          replicateM_ cases handleCase

handleCase :: IO ()
handleCase = do n <- readLn :: IO Int
                s <- getLine
                -- Reads tree
                let list = map read $ (words s) :: [Int]
                let tree = foldl insert Empty list
                let nlist = preorder tree
                -- Compares
                case (list == nlist) of
                  True -> putStrLn "YES"
                  False -> putStrLn "NO"
#+END_SRC
**** Lists and GCD
#+BEGIN_SRC haskell
import Control.Monad
import Data.List (intercalate)

gcdlist :: [[(Int,Int)]] -> [(Int,Int)]
gcdlist xs = foldr gcdtwo (head xs) xs

gcdtwo :: [(Int,Int)] -> [(Int,Int)] -> [(Int,Int)]
gcdtwo [] _  = []
gcdtwo _  [] = []
gcdtwo ((x,n):xs) ((y,m):ys)
  | (x == y) = (x, min n m):(gcdtwo xs ys)
  | (x <  y) = gcdtwo xs ((y,m):ys)
  | (x >  y) = gcdtwo ((x,n):xs) ys

pairs :: [a] -> [(a,a)]
pairs []       = []
pairs (x:y:xs) = (x,y):(pairs xs)

showPair :: (Show a) => (a,a) -> String
showPair (x,y) = (show x) ++ " " ++ (show y) 

main :: IO ()
main = do
  cases <- readLn :: IO Int
  lists <- replicateM cases (fmap (pairs . (map read) . words) getLine)
  putStrLn $ intercalate " " $ map showPair $ gcdlist lists
#+END_SRC
**** Tree Manager
#+BEGIN_SRC haskell
import Control.Monad
import Control.Monad.Writer
import Data.Sequence (Seq, singleton)
import Data.Foldable (sequence_)

data Tree a = Node a [Tree a]
data Trail a = Trail (a, [Tree a], [Tree a])
type ZipTree a = (Tree a, [Trail a])

change :: a -> ZipTree a -> ZipTree a
change x (Node y xs, t) = (Node x xs, t)

get :: ZipTree a -> a
get (Node x xs, t) = x

visitLeft :: ZipTree a -> ZipTree a
visitLeft (t, Trail (p, l:ls, rs) : ts) = (l, Trail (p, ls, t:rs) : ts)

visitRight :: ZipTree a -> ZipTree a
visitRight (t, Trail (p, ls, r:rs) : ts) = (r, Trail (p, t:ls, rs) : ts)

visitParent :: ZipTree a -> ZipTree a
visitParent (t, Trail (p, ls, rs) : ts) = (Node p ((reverse ls) ++ [t] ++ rs), ts)

visitChild :: Int -> ZipTree a -> ZipTree a
visitChild n (Node y (x:xs), p) = rightntimes (x, (Trail (y, [], xs)):p)
  where
    rightntimes = (foldr (.) id (replicate (n-1) visitRight))

insertLeft :: a -> ZipTree a -> ZipTree a
insertLeft  l (t, Trail (p, ls, rs) : ts) = (t, Trail (p, (Node l []):ls, rs) : ts)

insertRight :: a -> ZipTree a -> ZipTree a
insertRight r (t, Trail (p, ls, rs) : ts) = (t, Trail (p, ls, (Node r []):rs) : ts)

insertChild :: a -> ZipTree a -> ZipTree a
insertChild c (Node x xs, ts) = (Node x ((Node c []):xs), ts)

delete :: ZipTree a -> ZipTree a
delete (_, Trail (p, ls, rs) : ts) = (Node p ((reverse ls) ++ rs), ts)

printTree :: (Show a) => ZipTree a -> Writer (Seq String) (ZipTree a)
printTree zt@(Node x _,_) = writer (zt, singleton (show x))

readOperation :: (Read a, Show a) => [String] -> (ZipTree a -> Writer (Seq String) (ZipTree a))
readOperation s = case s of
  ["change", x]         -> fmap return $ change (read x)
  ["print"]             -> printTree
  ["visit","left"]      -> fmap return $ visitLeft
  ["visit","right"]     -> fmap return $ visitRight
  ["visit","parent"]    -> fmap return $ visitParent
  ["visit","child", n]  -> fmap return $ visitChild (read n)
  ["insert","left", x]  -> fmap return $ insertLeft (read x)
  ["insert","right", x] -> fmap return $ insertRight (read x)
  ["insert","child", x] -> fmap return $ insertChild (read x)
  ["delete"]            -> fmap return $ delete
  _                     -> error "Invalid expression"

startTree :: ZipTree Int
startTree = (Node 0 [], [])


main = do
  n <- readLn :: IO Int
  operations <- replicateM n (fmap (readOperation . words) getLine)
  let (a,w) = runWriter $ foldl (>>=) (return startTree) operations
  Data.Foldable.sequence_ $ fmap putStrLn w
#+END_SRC
**** Fighting Armies
#+BEGIN_SRC haskell
import Data.Sequence as Seq
import Data.Foldable
import Data.Vector.Mutable as Vect (replicate,unsafeRead,unsafeWrite,modify,unsafeModify,MVector)
import Control.Monad
import Control.Monad.Primitive
import qualified Data.ByteString.Lazy.Char8 as DB

data BinomialTree a = Nil | Node a (Seq (BinomialTree a))
  deriving (Show)
type BinomialHeap a = [BinomialTree a]

singleton :: a -> BinomialTree a
singleton x = Node x empty

singleHeap :: a -> BinomialHeap a
singleHeap x = [Main.singleton x]

sumTree :: (Ord a) => BinomialTree a -> BinomialTree a -> (BinomialTree a, BinomialTree a)
sumTree x   Nil = (x,Nil)
sumTree Nil y   = (y,Nil)
sumTree (Node x xs) (Node y ys)
  | x >= y    = (Nil,Node x (xs |> Node y ys))
  | otherwise = (Nil,Node y (ys |> Node x xs))

sumTrees :: (Ord a) => BinomialTree a
         -> BinomialTree a
         -> BinomialTree a
         -> (BinomialTree a, BinomialTree a)
sumTrees t x Nil = sumTree t x
sumTrees t Nil y = sumTree t y
sumTrees Nil x y = sumTree x y
sumTrees t x y   = (txy,rr)
  where (xy,r)   = sumTree x y
        (txy,rt) = sumTree xy t
        (rr,_)   = sumTree r rt

sumHeaps :: (Ord a) => BinomialTree a -> BinomialHeap a -> BinomialHeap a -> BinomialHeap a
sumHeaps Nil [] []     = []
sumHeaps Nil [x] (Nil:ys) = x:ys
sumHeaps Nil (x:xs) [] = x:xs
sumHeaps Nil [] (y:ys) = y:ys
sumHeaps t []     []     = [t]
sumHeaps t (x:xs) []     = tx:sumHeaps r xs []
  where (tx, r) = sumTree t x
sumHeaps t []     (y:ys) = ty:sumHeaps r [] ys
  where (ty, r) = sumTree t y
sumHeaps t (x:xs) (y:ys) = txy:sumHeaps r xs ys
  where (txy, r) = sumTrees t x y




merge :: (Ord a) => BinomialHeap a -> BinomialHeap a -> BinomialHeap a
merge = sumHeaps Nil

insert :: (Ord a) => a -> BinomialHeap a -> BinomialHeap a
insert x = merge (singleHeap x)

findMin :: BinomialHeap Int -> Int
findMin h = Prelude.foldr max 0 $ fs h
  where
    fs []            = []
    fs (Nil:xs)      = fs xs
    fs (Node x _:xs) = x:fs xs

deleteMinTree :: (Ord a) => a -> BinomialHeap a -> (BinomialHeap a, BinomialHeap a)
deleteMinTree _ []               = ([],[])
deleteMinTree m (Nil:xs)         = (Nil:fst (deleteMinTree m xs),snd $ deleteMinTree m xs)
deleteMinTree m (Node x ts:xs)
  | x == m    = (Nil:fst (deleteMinTree m xs), toList ts)
  | otherwise = (Node x ts:fst (deleteMinTree m xs), snd $ deleteMinTree m xs)

deleteMin :: BinomialHeap Int -> BinomialHeap Int
deleteMin h = merge hm mint
  where (hm, mint) = deleteMinTree (findMin h) h




main :: IO ()
main = do
  [narmies, _] <- fmap (map read . words) getLine :: IO [Int]
  army <- Vect.replicate (succ narmies) []
  contents <- fmap DB.lines DB.getContents
  Control.Monad.forM_ contents (\line ->
    do
      let order = map readbs . DB.words $ line
      case order of
        [1,i] -> do
          arm <- Vect.unsafeRead army i
          print $ findMin arm
        [2,i] ->
          Vect.unsafeModify army deleteMin i
        [3,i,c] ->
          Vect.unsafeModify army (insert c) i
        [4,i,j] -> do
          armj <- Vect.unsafeRead army j
          Vect.unsafeModify army (merge armj) i
    )
  return ()

readbs :: DB.ByteString -> Int
readbs n = case DB.readInt n of
  Nothing -> undefined
  Just (m,_) -> m
#+END_SRC
*** Memoization and DP
**** Number of Binary Search Tree
#+BEGIN_SRC haskell
import Control.Monad

(*.),(+.) :: Int -> Int -> Int
(*.) = (\a b -> (a*b) `mod` 100000007)
(+.) = (\a b -> (a+b) `mod` 100000007)

bin :: [Int]
bin = 1 : do
  n <- [1..]
  return $ foldr (+.) 0 $ do
    c <- [0..(n-1)]
    return $ (bin !! c) *. (bin !! (n-1-c))

main :: IO ()
main = do
  cases <- readLn :: IO Int
  replicateM_ cases (
    do
      n <- readLn
      print $ bin !! n
    )
#+END_SRC
**** Pentagonal Numbers
#+BEGIN_SRC haskell
import Control.Monad

pentagonals = 0 : zipWith (+) pentagonals (map ((+1) . (*3)) [0..])
pentagonal n = quot (n*(3*n-1)) 2

main = do
  n <- readLn
  replicateM_ n (
    do
      m <- readLn
      print $ pentagonal m
    )
#+END_SRC
**** Fibonacci
#+BEGIN_SRC haskell
import Control.Monad

modulo = 100000000 + 7
(+.) = \x -> \y -> mod (x+y) modulo
fibonacci = [0,1] ++ (zipWith (+.) fibonacci (tail fibonacci))
fib = (fibonacci !!)

main = do
  cases <- readLn
  replicateM_ cases (do
                        n <- readLn
                        print $ fib n
                    )
#+END_SRC
**** Expressions
#+BEGIN_SRC haskell
import Control.Monad
import Data.Sequence (Seq,singleton)
import Data.Foldable (toList)
import Data.Monoid

(+.) a b = mod (a+b) 101
(*.) a b = mod (a*b) 101
(-.) a b = mod (a-b) 101

operation :: (Int,Seq String) -> Int -> [(Int,Seq String)]
operation (n,s) x = [ (n *. x,mappend s $ singleton ("*"++show x)),
                      (n -. x,mappend s $ singleton ("-"++show x)),
                      (n +. x,mappend s $ singleton ("+"++show x))
                    ]

solution :: [Int] -> String
solution (x:xs) = concat . toList $
  snd . head $ filter ((==0) . fst) $ foldM operation (x,singleton (show x)) xs

main :: IO ()
main = do
  n <- readLn :: (IO Int)
  nms <- fmap ((fmap read) . words) getLine :: (IO [Int])
  putStrLn $ solution nms
#+END_SRC
*** Ad Hoc
**** Jumping Bunnies
#+BEGIN_SRC haskell
import Control.Monad

jumps :: (Integral a) => [a] -> a
jumps = foldr lcm 1

main :: IO ()
main = do
  n <- readLn :: IO Int
  bunnies <- (fmap ((map read) . words) getLine) :: IO [Int]
  print $ jumps bunnies
#+END_SRC
**** Rotate String
#+BEGIN_SRC haskell
import Data.List

rotations :: String -> [String]
rotations s = tail $ zipWith (++) (tails s) (inits s)

main = do
  strings <- input
  let output = map ((intercalate " ") . rotations) strings
  mapM_ putStrLn output
  
input :: IO [String]
input = do
  n <- readLn :: IO Int
  sequence $ map (\i -> getLine) [1..n]
#+END_SRC
**** Remove Duplicates
#+BEGIN_SRC haskell
import Data.Char
import Data.Bits

type Bit32 = Int

indexChar :: Char -> Int
indexChar c = (ord c) - (ord 'a')

isChar :: Bit32 -> Char -> Bool
isChar a c = testBit a (indexChar c)

setChar :: Bit32 -> Char -> Bit32
setChar a c = setBit a (indexChar c)


duplicates :: String -> String
duplicates xs = duplicates' 0 xs

duplicates' :: Bit32 -> String -> String
duplicates' _ []     = []
duplicates' b (x:xs)
  | (isChar b x)  = duplicates' b xs
  | otherwise     = x : (duplicates' (setChar b x) xs)

main = do
  string <- getLine
  putStrLn (duplicates string)
#+END_SRC
**** Huge GCD
#+BEGIN_SRC haskell
(*.) a b = mod (a*b) 1000000007

hugegcd :: [Int] -> [Int] -> Int
hugegcd as bs = fst $ foldr gcdr (1,bs) as
  where
    gcdr :: Int -> (Int,[Int]) -> (Int,[Int])
    gcdr a (g,br) = (g *. ng, nbr)
      where
        (ng,nbr) = gcda a br

gcda :: Int -> [Int] -> (Int,[Int])
gcda a []     = (1,[])
gcda a (b:bs) = (d *. g, (quot b d):ls)
  where
    d      = gcd a b
    (g,ls) = gcda (quot a d) bs


main = do
  a <- readLn :: IO Int
  lista <- fmap ((map read) . words) getLine
  b <- readLn :: IO Int
  listb <- fmap ((map read) . words) getLine
  putStrLn . show $ hugegcd lista listb
#+END_SRC
**** Missing Numbers (FP)
#+BEGIN_SRC haskell
import Prelude hiding (replicate, zipWith)
import Data.List hiding (replicate, zipWith)
import Data.Sequence

counter :: [Int] -> Seq Int
counter = foldr (adjust (+1)) (replicate 110 0) 

difference :: [Int] -> [Int] -> [Int]
difference as bs = map (+minb) $ findIndicesL (>0) $ zipWith (-) (counter bms) (counter ams)
  where
    minb = minimum bs
    ams  = map ((flip (-)) minb) as
    bms  = map ((flip (-)) minb) bs 

main :: IO ()
main = do
  na <- readLn :: IO Int
  anumbers <- fmap (map read . words) getLine
  nb <- readLn :: IO Int
  bnumbers <- fmap (map read . words) getLine
  putStrLn . (intercalate " ") . (map show) $ difference anumbers bnumbers
#+END_SRC
**** Common divisors
#+BEGIN_SRC haskell
import Data.List
import Control.Monad
import Control.Arrow

factors :: Int -> [Int]
factors n = fact 2 n
  where
    fact d n
      | d > n          = []
      | (mod n d == 0) = d : fact d (quot n d)
      | otherwise      = fact (succ d) n

primefactors :: Int -> [(Int,Int)]
primefactors n = (map (head &&& length)) . group $ (factors n)

divisors :: Int -> Int
divisors n = product $ map ((+1) . snd) (primefactors n)

commondivisors :: Int -> Int -> Int
commondivisors x y = divisors $ gcd x y

main = do
  n <- readLn :: IO Int
  replicateM_ n (
    do
      (a,b) <- fmap ((\[x,y] -> (x,y)) . (map read) . words) getLine
      putStrLn . show $ commondivisors a b
    )
#+END_SRC
**** Captain Prime
#+BEGIN_SRC haskell
import Data.List

primes :: [Int]
primes = 2 : filter isPrime [3,5..]

isPrime :: Int -> Bool
isPrime x = (x>1) && (all (\n -> x `mod` n /= 0) $
            takeWhile (\n -> n * n <= x) primes)

leftReminders :: Int -> [Int]
leftReminders n = map read $ init $ tails (show n)

rightReminders :: Int -> [Int]
rightReminders 0 = []
rightReminders n = n : rightReminders (quot n 10)

haszero :: Int -> Bool
haszero n = elem '0' (show n)

fate :: Int -> String
fate n
  | haszero n     = "DEAD"
  | left && right = "CENTRAL"
  | left          = "LEFT"
  | right         = "RIGHT"
  | otherwise     = "DEAD"
  where
    left  = and (map isPrime $ leftReminders n)
    right = and (map isPrime $ rightReminders n)

main :: IO ()
main = do
  cases <- readLn 
  numbers <- mapM (\i -> readLn) [1..cases]
  let strings = map fate numbers
  mapM_ putStrLn strings
#+END_SRC
** Mathematics
*** Algebra
**** Easy sum
#+BEGIN_SRC haskell
import Control.Monad
import Control.Applicative
import Data.Bits

sumTo :: Int -> Int
sumTo k = (k*(k+1)) `shiftR` 1

easysum :: Int -> Int -> Int
easysum n m = (n `div` m) * (sumTo (m-1)) + (sumTo r)
    where r = n `mod` m

main :: IO ()
main = do
    cases <- readLn :: IO Int
    replicateM_ cases $ do
        [n,m] <- map read <$> words <$> getLine
        putStrLn $ show $ easysum n m
#+END_SRC
** Cracking the code interview
*** Data Structures
**** Arrays: Left Rotation
***** C++ version
#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>
  using namespace std;

  vector<int> array_left_rotation(vector<int> a, int n, int k) {
      vector<int> result;
      for (int i=0; i<a.size(); i++)
          result.push_back(a[(i+k)%n]);
      return result;
  }

  int main(){
      int n;
      int k;
      cin >> n >> k;
      vector<int> a(n);
      for(int a_i = 0;a_i < n;a_i++){
          cin >> a[a_i];
      }
      vector<int> output = array_left_rotation(a, n, k);
      for(int i = 0; i < n;i++)
          cout << output[i] << " ";
      cout << endl;
      return 0;
  }
#+END_SRC

***** Haskell version
We are using a list in Haskell instead of an array.
Time complexity is the same, anyway. Using Data.Sequence
would not lead us to a better complexity.

#+BEGIN_SRC haskell
  import Control.Applicative
  import Data.List

  rotate :: Int -> [a] -> [a]
  rotate k xs = take (length xs) $ drop k (cycle xs)

  main :: IO ()
  main = do
    -- Input
    nt <- words <$> getLine
    let t = read $ nt!!1 :: Int
    larray <- (map read) . words <$> getLine
    -- Output
    let result = rotate t larray :: [Int]
    putStrLn (concat $ intersperse " " (map show result))
#+END_SRC

**** Linked Lists: Detect a cycle
This solution uses two *fast and slow* pointers. The main idea
is that if you put two pointers into a cycle of length $n$ separated by a
distance of $a$ and move them, one at a speed of $1$ and the other at a 
speed of $2$; they will eventually collide after $a$ steps.

\[ a + n \equiv 2n \]
\[a \equiv n\]
\[\]
#+BEGIN_SRC c++
bool has_cycle(Node* head) {
    Node* slow = head;
    Node* fast = head;
    while ((slow != nullptr) and (fast != nullptr) and (fast->next != nullptr)) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            return true;
    }
        
    return false;
}
#+END_SRC

**** Stacks: Balanced Brackets
#+BEGIN_SRC c++
  #include<iostream>
  #include<stack>
  using namespace std;

  bool is_balanced(string expression) {
    stack<char> brackets;
 
    for (char current : expression) {     
        if (current == '{' or current == '(' or current == '[')
            brackets.push(current);
        else if (not brackets.empty() and
                  (((current == '}') and (brackets.top() == '{')) or
                  ((current == ')') and (brackets.top() == '(')) or
                  ((current == ']') and (brackets.top() == '[')))
                )
                brackets.pop();
            else
                return false;
        }
   
    // It has to be empty!
    return brackets.empty();
  }

  int main(){
      int t;
      cin >> t;
      for(int a0 = 0; a0 < t; a0++){
          string expression;
          cin >> expression;
          bool answer = is_balanced(expression);
          if(answer)
              cout << "YES\n";
          else cout << "NO\n";
      }
      return 0;
  }
#+END_SRC
**** Queues: A tale of two stacks
#+BEGIN_SRC c++
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

class MyQueue {
  
    public:
        stack<int> stack_newest_on_top, stack_oldest_on_top;   
        void push(int x) {
            stack_newest_on_top.push(x);
        }

        void pop() {
            if (stack_oldest_on_top.empty())
                refill();
            stack_oldest_on_top.pop();
        }

        int front() {
            if (stack_oldest_on_top.empty())
                refill();
            return stack_oldest_on_top.top();
        }
    
        void refill() {
            while(not stack_newest_on_top.empty()) {
                stack_oldest_on_top.push(stack_newest_on_top.top());
                stack_newest_on_top.pop();
            }
        }
};

int main() {
    MyQueue q1;
    int q, type, x;
    cin >> q;
    
    for(int i = 0; i < q; i++) {
        cin >> type;
        if(type == 1) {
            cin >> x;
            q1.push(x);
        }
        else if(type == 2) {
            q1.pop();
        }
        else cout << q1.front() << endl;
    }

    return 0;
}
#+END_SRC
**** Trees: Is this a binary search tree?
#+BEGIN_SRC c++
  bool checkBST(Node* root) {
      return checkBSTBounds(root,-1,-1);
  }

  bool checkBSTBounds(Node* root, int lower, int upper) {
      if (!root)
          return true;
   
      int data = root->data;
      return ((upper == -1 or data < upper) and (lower == -1 or data > lower)) and
             checkBSTBounds(root->left, lower, data) and
             checkBSTBounds(root->right, data, upper);
  }
#+END_SRC
**** Heaps: Find the running median
#+BEGIN_SRC c++
  #include<vector>
  #include<algorithm>
  #include<iostream>
  #include<iomanip>

  using namespace std;

  int main() {
    cout << fixed << setprecision(1);
    vector<int> left_heap;
    vector<int> right_heap;
    float median;

    // Reads first case
    unsigned cases;
    cin >> cases;
    cin >> median;
    left_heap.push_back(median);
    push_heap(left_heap.begin(), left_heap.end(), greater<int>());
    cout << median << endl;

    for (unsigned i=1; i<cases; i++) {
      // Inserts new value
      int new_value; cin >> new_value;
      if (new_value > median) {
        right_heap.push_back(new_value);
        push_heap(right_heap.begin(), right_heap.end(), greater<int>());
      }
      else {
        left_heap.push_back(new_value);
        push_heap(left_heap.begin(), left_heap.end(), less<int>());
      }

      // Rebalances both heaps
      if (right_heap.size() > left_heap.size()) {
        int moving = right_heap[0];
        pop_heap(right_heap.begin(), right_heap.end(), greater<int>());
        right_heap.pop_back();

        left_heap.push_back(moving);
        push_heap(left_heap.begin(), left_heap.end(), less<int>());
      }
      if (left_heap.size() > right_heap.size()+1) {
        int moving = left_heap[0];
        pop_heap(left_heap.begin(), left_heap.end(), less<int>());
        left_heap.pop_back();

        right_heap.push_back(moving);
        push_heap(right_heap.begin(), right_heap.end(), greater<int>());
      }

      // Prints median
      if (i%2 != 0)
        median = (left_heap[0]+right_heap[0])/2.0;
      else
        median = left_heap[0];
      cout << median << endl;
    }
  }
#+END_SRC
**** Tries: Contacts
#+BEGIN_SRC c++
  #include<iostream>
  #include<string>
  #include<iomanip>
  using namespace std;

  struct trie {
    int counter;
    trie* children[26];
  };

  trie* create() {
    trie* t = new trie;
    t->counter = 0;
    for (int i=0; i<26; i++)
      t->children[i] = nullptr;
    return t;
  }


  void insert(trie* root, string s) {
    trie* current = root;
    for (char c : s) {
      trie* next = current -> children[c-'a'];
      if (next == nullptr) {
        trie* newtrie = create();
        current->children[c-'a'] = newtrie;
        current = newtrie;
      }
      else
        current = next; 
      current->counter++;
    }
  }


  int count(trie* root, string s) {
    trie* current = root;

    for (char c : s) {
      trie* next = current -> children[c-'a'];
      if (next == nullptr) {
        return 0;
      }
      else {
        current = next;
      }
    }

    return current -> counter;
  }


  int main() {
    trie* t = create();
    int cases; 
    cin >> cases;

    while(cases--) {
      string op, word;
      cin >> op >> word;
      if (op == "add")
        insert(t, word);
      else
        cout << count(t, word) << endl;     
    }
  }
#+END_SRC

*** Techniques
**** Recursion: Fibonacci numbers
We *won't use recursion* directly as I want to write a ${\cal O}(log(n))$ solution using matrices.
It uses bit manipulation in order to get the binary decomposition of the input.
#+BEGIN_SRC c++
  #include<vector>
  #include<iostream>
  using namespace std;

  typedef vector<int> Matrix;

  Matrix product(Matrix& a, Matrix& b) {
    Matrix prod;
    prod[0] = a[0]*b[0]+a[1]*b[2];
    prod[1] = a[0]*b[1]+a[1]*b[3];
    prod[2] = a[2]*b[0]+a[3]*b[2];
    prod[3] = a[2]*b[1]+a[3]*b[3];
    return prod;
  }

  int main() {
    int input; cin >> input;
    Matrix fib;
    fib.push_back(1);
    fib.push_back(1);
    fib.push_back(1);
    fib.push_back(0);
    Matrix result;
    result.push_back(1);
    result.push_back(0);
    result.push_back(0);
    result.push_back(1);

    while (input) {
      if (input & 1)
        result = product(result,fib);

      fib = product(fib,fib);
      input = (input >> 1);
    }

    cout << result[1] << endl;
  }
#+END_SRC
**** Bit manipulation: Lonely integer
Folds using =xor=. Every element will be cancelled out with its pair,
except for the result.
#+BEGIN_SRC c++
#include <vector>
#include <iostream>
using namespace std;

int lonely_integer(vector < int > a) {
    int result = 0;
    for (int i=0; i<a.size(); i++)
        result ^= a[i];
    return result;
}

int main(){
    int n;
    cin >> n;
    vector<int> a(n);
    for(int a_i = 0;a_i < n;a_i++){
       cin >> a[a_i];
    }
    cout << lonely_integer(a) << endl;
    return 0;
}
#+END_SRC
**** Time complexity: Primality
#+BEGIN_SRC c++
  #include<iostream>
  #include<cmath>
  using namespace std;

  int main() {
    int cases; cin >> cases;
    for (int i=0; i<cases; i++) {
      int input; cin >> input;
      bool is_prime = true;

      if (not (input > 1))
        is_prime = false;
    
      // Primality checker
      int root = (int) sqrt(input)+1;
      for (int i=2; i<root and is_prime; i++)
        is_prime = (input % i != 0);

      if (is_prime)
        cout << "Prime" << endl;
      else
        cout << "Not prime" << endl;
    }
  }
#+END_SRC
