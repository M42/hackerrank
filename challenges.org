#+TITLE: Programming Challenges
#+AUTHOR: Mario RomÃ¡n
#+OPTIONS: num:nil
#+SETUPFILE: html.setup

* Hackerrank
** Mathematics
*** Algebra
**** Easy sum
#+BEGIN_SRC haskell
import Control.Monad
import Control.Applicative
import Data.Bits

sumTo :: Int -> Int
sumTo k = (k*(k+1)) `shiftR` 1

easysum :: Int -> Int -> Int
easysum n m = (n `div` m) * (sumTo (m-1)) + (sumTo r)
    where r = n `mod` m

main :: IO ()
main = do
    cases <- readLn :: IO Int
    replicateM_ cases $ do
        [n,m] <- map read <$> words <$> getLine
        putStrLn $ show $ easysum n m
#+END_SRC
**** Find the point
https://www.hackerrank.com/challenges/find-point/problem

#+begin_src haskell
{-# LANGUAGE FlexibleInstances, UndecidableInstances, DuplicateRecordFields #-}

module Main where

import Control.Monad
import Data.List
import Data.List.Split
import Data.Set
import System.Environment
import System.IO

--
-- Complete the findPoint function below.
--
findPoint px py qx qy = [qx - (px - qx) , qy - (py - qy)]
    -- Write your code here.
    

main :: IO ()
main = do
    stdout <- getEnv "OUTPUT_PATH"
    fptr <- openFile stdout WriteMode

    n <- readLn :: IO Int

    forM_ [1..n] $ \nItr -> do
        pxPyQxQyTemp <- getLine
        let pxPyQxQy = words pxPyQxQyTemp

        let px = read (pxPyQxQy !! 0) :: Int
        let py = read (pxPyQxQy !! 1) :: Int
        let qx = read (pxPyQxQy !! 2) :: Int
        let qy = read (pxPyQxQy !! 3) :: Int

        let result = findPoint px py qx qy

        hPutStrLn fptr $ intercalate " " $ Data.List.map (\x -> show x) $ result

    hFlush fptr
    hClose fptr
#+end_src haskell

** Cracking the code interview
*** Data Structures
**** Arrays: Left Rotation
***** C++ version
#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>
  using namespace std;

  vector<int> array_left_rotation(vector<int> a, int n, int k) {
      vector<int> result;
      for (int i=0; i<a.size(); i++)
          result.push_back(a[(i+k)%n]);
      return result;
  }

  int main(){
      int n;
      int k;
      cin >> n >> k;
      vector<int> a(n);
      for(int a_i = 0;a_i < n;a_i++){
          cin >> a[a_i];
      }
      vector<int> output = array_left_rotation(a, n, k);
      for(int i = 0; i < n;i++)
          cout << output[i] << " ";
      cout << endl;
      return 0;
  }
#+END_SRC

***** Haskell version
We are using a list in Haskell instead of an array.
Time complexity is the same, anyway. Using Data.Sequence
would not lead us to a better complexity.

#+BEGIN_SRC haskell
  import Control.Applicative
  import Data.List

  rotate :: Int -> [a] -> [a]
  rotate k xs = take (length xs) $ drop k (cycle xs)

  main :: IO ()
  main = do
    -- Input
    nt <- words <$> getLine
    let t = read $ nt!!1 :: Int
    larray <- (map read) . words <$> getLine
    -- Output
    let result = rotate t larray :: [Int]
    putStrLn (concat $ intersperse " " (map show result))
#+END_SRC

**** Strings: Making Anagrams
#+BEGIN_SRC cpp
  #include <vector>
  #include <cmath>
  #include <iostream>
  using namespace std;

  int number_needed(string a, string b) {
    vector<int> counting;
    for (int i=0; i<26; i++)
      counting.push_back(0);
    
    for (char c : a)
      counting[c-'a']++;
    for (char c : b)
      counting[c-'a']--;
    
    int sum = 0;
    for (int n : counting)
      sum += abs(n);
    
    return sum;
  }

  int main(){
    string a;
    cin >> a;
    string b;
    cin >> b;
    cout << number_needed(a, b) << endl;
    return 0;
  }
#+END_SRC
**** Hash Tables: Ransom Note
#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  #include<unordered_map>
  #include<string>
  using namespace std;

  int main() {
    bool answer = true;
    int mag_words;
    int ran_words;
    cin >> mag_words >> ran_words;

    unordered_map<string,int> magazine;
    for (int i=0; i<mag_words; i++) {
      string read;
      cin >> read;
      magazine.emplace(read,0);
      magazine[read]++;    
    }

    for (int i=0; i<ran_words and answer; i++) {
      string read;
      cin >> read;
      if (magazine.count(read) == 0 or magazine[read] == 0) {
        answer = false;
        break;
      }

      magazine[read]--;
    }


    if (answer)
      cout << "Yes";
    else
      cout << "No";
  }
#+END_SRC
**** Linked Lists: Detect a cycle
This solution uses two *fast and slow* pointers. The main idea
is that if you put two pointers into a cycle of length $n$ separated by a
distance of $a$ and move them, one at a speed of $1$ and the other at a 
speed of $2$; they will eventually collide after $a$ steps.

\[ a + n \equiv 2n \]
\[a \equiv n\]
\[\]
#+BEGIN_SRC c++
bool has_cycle(Node* head) {
    Node* slow = head;
    Node* fast = head;
    while ((slow != nullptr) and (fast != nullptr) and (fast->next != nullptr)) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            return true;
    }
        
    return false;
}
#+END_SRC

**** Stacks: Balanced Brackets
#+BEGIN_SRC c++
  #include<iostream>
  #include<stack>
  using namespace std;

  bool is_balanced(string expression) {
    stack<char> brackets;
 
    for (char current : expression) {     
        if (current == '{' or current == '(' or current == '[')
            brackets.push(current);
        else if (not brackets.empty() and
                  (((current == '}') and (brackets.top() == '{')) or
                  ((current == ')') and (brackets.top() == '(')) or
                  ((current == ']') and (brackets.top() == '[')))
                )
                brackets.pop();
            else
                return false;
        }
   
    // It has to be empty!
    return brackets.empty();
  }

  int main(){
      int t;
      cin >> t;
      for(int a0 = 0; a0 < t; a0++){
          string expression;
          cin >> expression;
          bool answer = is_balanced(expression);
          if(answer)
              cout << "YES\n";
          else cout << "NO\n";
      }
      return 0;
  }
#+END_SRC
**** Queues: A tale of two stacks
#+BEGIN_SRC c++
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

class MyQueue {
  
    public:
        stack<int> stack_newest_on_top, stack_oldest_on_top;   
        void push(int x) {
            stack_newest_on_top.push(x);
        }

        void pop() {
            if (stack_oldest_on_top.empty())
                refill();
            stack_oldest_on_top.pop();
        }

        int front() {
            if (stack_oldest_on_top.empty())
                refill();
            return stack_oldest_on_top.top();
        }
    
        void refill() {
            while(not stack_newest_on_top.empty()) {
                stack_oldest_on_top.push(stack_newest_on_top.top());
                stack_newest_on_top.pop();
            }
        }
};

int main() {
    MyQueue q1;
    int q, type, x;
    cin >> q;
    
    for(int i = 0; i < q; i++) {
        cin >> type;
        if(type == 1) {
            cin >> x;
            q1.push(x);
        }
        else if(type == 2) {
            q1.pop();
        }
        else cout << q1.front() << endl;
    }

    return 0;
}
#+END_SRC
**** Trees: Is this a binary search tree?
#+BEGIN_SRC c++
  bool checkBST(Node* root) {
      return checkBSTBounds(root,-1,-1);
  }

  bool checkBSTBounds(Node* root, int lower, int upper) {
      if (!root)
          return true;
   
      int data = root->data;
      return ((upper == -1 or data < upper) and (lower == -1 or data > lower)) and
             checkBSTBounds(root->left, lower, data) and
             checkBSTBounds(root->right, data, upper);
  }
#+END_SRC
**** Heaps: Find the running median
#+BEGIN_SRC c++
  #include<vector>
  #include<algorithm>
  #include<iostream>
  #include<iomanip>

  using namespace std;

  int main() {
    cout << fixed << setprecision(1);
    vector<int> left_heap;
    vector<int> right_heap;
    float median;

    // Reads first case
    unsigned cases;
    cin >> cases;
    cin >> median;
    left_heap.push_back(median);
    push_heap(left_heap.begin(), left_heap.end(), greater<int>());
    cout << median << endl;

    for (unsigned i=1; i<cases; i++) {
      // Inserts new value
      int new_value; cin >> new_value;
      if (new_value > median) {
        right_heap.push_back(new_value);
        push_heap(right_heap.begin(), right_heap.end(), greater<int>());
      }
      else {
        left_heap.push_back(new_value);
        push_heap(left_heap.begin(), left_heap.end(), less<int>());
      }

      // Rebalances both heaps
      if (right_heap.size() > left_heap.size()) {
        int moving = right_heap[0];
        pop_heap(right_heap.begin(), right_heap.end(), greater<int>());
        right_heap.pop_back();

        left_heap.push_back(moving);
        push_heap(left_heap.begin(), left_heap.end(), less<int>());
      }
      if (left_heap.size() > right_heap.size()+1) {
        int moving = left_heap[0];
        pop_heap(left_heap.begin(), left_heap.end(), less<int>());
        left_heap.pop_back();

        right_heap.push_back(moving);
        push_heap(right_heap.begin(), right_heap.end(), greater<int>());
      }

      // Prints median
      if (i%2 != 0)
        median = (left_heap[0]+right_heap[0])/2.0;
      else
        median = left_heap[0];
      cout << median << endl;
    }
  }
#+END_SRC
**** Tries: Contacts
#+BEGIN_SRC c++
  #include<iostream>
  #include<string>
  #include<iomanip>
  using namespace std;

  struct trie {
    int counter;
    trie* children[26];
  };

  trie* create() {
    trie* t = new trie;
    t->counter = 0;
    for (int i=0; i<26; i++)
      t->children[i] = nullptr;
    return t;
  }


  void insert(trie* root, string s) {
    trie* current = root;
    for (char c : s) {
      trie* next = current -> children[c-'a'];
      if (next == nullptr) {
        trie* newtrie = create();
        current->children[c-'a'] = newtrie;
        current = newtrie;
      }
      else
        current = next; 
      current->counter++;
    }
  }


  int count(trie* root, string s) {
    trie* current = root;

    for (char c : s) {
      trie* next = current -> children[c-'a'];
      if (next == nullptr) {
        return 0;
      }
      else {
        current = next;
      }
    }

    return current -> counter;
  }


  int main() {
    trie* t = create();
    int cases; 
    cin >> cases;

    while(cases--) {
      string op, word;
      cin >> op >> word;
      if (op == "add")
        insert(t, word);
      else
        cout << count(t, word) << endl;     
    }
  }
#+END_SRC
*** Algorithms
**** Sorting: Bubble Sort
**** Sorting: Comparator
#+BEGIN_SRC python
  class Player:
      def __init__(self, name, score):
          self.name = name
          self.score = score
        
      def __repr__(self):
          pass
        
      def comparator(a, b):
          if (a.score == b.score):
              return cmp(a.name,b.name)
          else:
              return cmp(b.score,a.score)
#+END_SRC
**** Merge Sort: Counting Inversions
#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  using namespace std;
  typedef long long int lli;

  lli merge(vector<int>& array, int left, int right) {
    lli swaps = 0;
    int middle = (left+right)/2;
    vector<int> left_array(array.begin()+left, array.begin()+middle);
    vector<int> right_array(array.begin()+middle, array.begin()+right);

    int i = 0;
    int j = 0;
    int k = left;

    while (i < left_array.size() and j < right_array.size()) {
      if (left_array[i] <= right_array[j]) {
        array[k] = left_array[i];
        i++;
        k++;
      }
      else {
        array[k] = right_array[j];
        j++;
        k++;
        swaps += left_array.size()-i;
      }
    }


    while (i < left_array.size()) {
      array[k] = left_array[i];
      i++;
      k++;
    }

    while (j < right_array.size()) {
      array[k] = right_array[j];
      j++;
      k++;
    }

    return swaps;
  }


  lli mergesort(vector<int>& array, int left, int right) {
    if (right-left < 2)
      return 0;

    lli swaps = 0;
    int middle = (left+right)/2;
    swaps += mergesort(array, left, middle);
    swaps += mergesort(array, middle, right);
    swaps += merge(array, left, right);    

    return swaps;
  }


  int main() {
    int d; cin >> d;
    for (int cases=0; cases<d; cases++) {
      int n; cin >> n;
      vector<int> array(n);
      for (int i=0; i<n; i++)
        cin >> array[i];
      cout << mergesort(array,0,array.size()) << endl;
    }
  }
#+END_SRC
**** Binary Search: Ice Cream Parlor
#+BEGIN_SRC cpp
  #include <bits/stdc++.h>
  using namespace std;

  class IceCream {
    
  public: 
    int flavor; 
    int index;

    IceCream(int flavor, int index) {
      this->flavor = flavor;
      this->index = index;
    }
  };

  bool compare(IceCream a, IceCream b) {
    return a.flavor < b.flavor;
  }

  int binarySearch(int first, int last, vector<IceCream> arr, int search) {
    int middle = (first+last)/2;

    while (arr[middle].flavor != search) {
      if (first > last)
        return -1;
            
      if (arr[middle].flavor < search) {
        first = middle+1;
        middle = (first+last)/2;
      }
      else if (arr[middle].flavor > search) {
        last = middle-1;
        middle = (first+last)/2;
      }
    }
    
    return arr[middle].index;
  }

  int main() {
    int t;
    int n, m;
    cin >> t;
    for(int test = 0; test < t; test++) {       
      cin >> m >> n;
      vector<IceCream> arr;
      arr.reserve(n); 

      for (int i = 0; i < n; i++) {
        int cost;
        cin >> cost;
        arr.push_back(IceCream(cost, i + 1));
      }

      sort(arr.begin(), arr.end(), compare);
      int firstIndex = 100000, secondIndex = 100000;
      for(int i = 0; i < n - 1 ; i++) {
        int search = m - arr[i].flavor;
        if(search >= arr[i].flavor) {
          int index = binarySearch( i + 1, n - 1, arr, search);
          if( index != -1 ) {
            cout << min(arr[i].index, index) << " " << max(arr[i].index, index) << endl;
            break;

          }
        }
      }

    }

  }
#+END_SRC
**** DFS: Connected Cell in a Grid
#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  using namespace std;
  typedef vector<vector<bool> > Matrix;

  int count_region(Matrix& matrix, int i, int j) {
      matrix[i][j] = false;
      int sum = 1;
    
      for (int a = -1; a<2; a++)
          for (int b = -1; b<2; b++)
              if (i+a < matrix.size() and i+a >= 0)
                  if (j+a < matrix.size() and j+b >= 0)
                      if (matrix[i+a][j+b])
                          sum += count_region(matrix,i+a,j+b);

      return sum;
  }


  int larger_region(Matrix& matrix) {
      int max_region = 0;

      for (unsigned i=0; i<matrix.size(); i++) 
          for (unsigned j=0; j<matrix[i].size(); j++) 
              if (matrix[i][j]) {
                  int new_region = count_region(matrix,i,j);
                  if (new_region > max_region)
                      max_region = new_region;
              }

      return max_region;
  }


  int main() {
      Matrix matrix;
      int n,m;
      cin >> n; cin >> m;
      for (int i=0; i<n; i++) {
          vector<bool> row;
          for (int j=0; j<m; j++) {
              int read;
              cin >> read;
              row.push_back(read == 1);
          }
          matrix.push_back(row);
      }

      cout << larger_region(matrix);
  }
#+END_SRC
**** BFS: Shortest Reach
#+BEGIN_SRC cpp
  #include<vector>
  #include<queue>
  #include<iostream>
  using namespace std;
  typedef vector< vector<int> > Graph;

  int main() {
    int cases;
    cin >> cases;
    for (int k=0; k<cases; k++) {
      int nodes;
      int edges;
      cin >> nodes >> edges;
      Graph graph(nodes, vector<int>());
      vector<int> distance(nodes, -1);
      queue<int> to_visit;

      for (int i=0; i<edges; i++) {
        int a, b;
        cin >> a >> b;
        a = a-1;
        b = b-1;
        graph[a].push_back(b);
        graph[b].push_back(a);
      }

      int initial_node;
      cin >> initial_node;
      initial_node = initial_node-1;
      to_visit.push(initial_node);
      distance[initial_node] = 0;

      while (!to_visit.empty()) {
        int current = to_visit.front();
        to_visit.pop();
            
        for (int i=0; i<graph[current].size(); i++) {
          int next = graph[current][i];
          if (distance[next] == -1) {
            distance[next] = distance[current] + 6;
            to_visit.push(next);
          }
        }
      }

      for (int i=0; i<distance.size(); i++)
        if (i != initial_node)
          cout << distance[i] << " ";
      cout << endl;
    }
  }
#+END_SRC

*** Techniques
**** Time complexity: Primality
#+BEGIN_SRC c++
  #include<iostream>
  #include<cmath>
  using namespace std;

  int main() {
    int cases; cin >> cases;
    for (int i=0; i<cases; i++) {
      int input; cin >> input;
      bool is_prime = true;

      if (not (input > 1))
        is_prime = false;
    
      // Primality checker
      int root = (int) sqrt(input)+1;
      for (int i=2; i<root and is_prime; i++)
        is_prime = (input % i != 0);

      if (is_prime)
        cout << "Prime" << endl;
      else
        cout << "Not prime" << endl;
    }
  }
#+END_SRC
**** Recursion: Fibonacci numbers
We *won't use recursion* directly as I want to write a ${\cal O}(log(n))$ solution using matrices.
It uses bit manipulation in order to get the binary decomposition of the input.
#+BEGIN_SRC c++
  #include<vector>
  #include<iostream>
  using namespace std;

  typedef vector<int> Matrix;

  Matrix product(Matrix& a, Matrix& b) {
    Matrix prod;
    prod[0] = a[0]*b[0]+a[1]*b[2];
    prod[1] = a[0]*b[1]+a[1]*b[3];
    prod[2] = a[2]*b[0]+a[3]*b[2];
    prod[3] = a[2]*b[1]+a[3]*b[3];
    return prod;
  }

  int main() {
    int input; cin >> input;
    Matrix fib;
    fib.push_back(1);
    fib.push_back(1);
    fib.push_back(1);
    fib.push_back(0);
    Matrix result;
    result.push_back(1);
    result.push_back(0);
    result.push_back(0);
    result.push_back(1);

    while (input) {
      if (input & 1)
        result = product(result,fib);

      fib = product(fib,fib);
      input = (input >> 1);
    }

    cout << result[1] << endl;
  }
#+END_SRC
**** Recursion: Davis' Staircase
#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  using namespace std;
  vector<int> solutions;

  int ways_staircase(int staircase) {
    if (staircase < 0)
      return 0;
    if (staircase < solutions.size() and solutions[staircase] != -1)
      return solutions[staircase];

    int sum = 0;
    sum += ways_staircase(staircase-1);
    sum += ways_staircase(staircase-2);
    sum += ways_staircase(staircase-3);

    while (solutions.size() < staircase)
      solutions.push_back(-1);
    if (solutions.size() == staircase)
      solutions.push_back(staircase);
    if (staircase < solutions.size())
      solutions[staircase] = sum;
    
    return sum;
  }


  int main() {
    solutions.push_back(1);

    int cases; cin >> cases;
    for (int i=0; i<cases; i++) {
      int staircase;
      cin >> staircase;
      cout << ways_staircase(staircase) << endl;
    }
  }
#+END_SRC
**** DP: Coin Change
***** Naive approach
A naive solution using ${\cal O}(nm)$ space.

#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  using namespace std;
  typedef vector< vector<long long> > Matrix;
  typedef long long int lli;

  lli ways_change(Matrix& ways, vector<int>& coins, int dollars, int limit_coin) {
    if (dollars < 0)
      return 0;
    if (dollars == 0)
      return 1;
    if (limit_coin >= coins.size())
      return 0;

    if (ways[dollars][limit_coin] != -1)
      return ways[dollars][limit_coin];

    lli counter = 0;
    counter += ways_change(ways, coins, dollars-coins[limit_coin], limit_coin);
    counter += ways_change(ways, coins, dollars, limit_coin+1);
    
    ways[dollars][limit_coin] = counter;
    return counter;
  }


  int main() {
    int n;
    int m;
    cin >> n >> m;
    Matrix ways(n+1, vector<lli>(m,-1));
    vector<int> coins;

    for (int i=0; i<m; i++) {
      int read;
      cin >> read;
      coins.push_back(read);
    }

    cout << ways_change(ways,coins,n,0);
  }
#+END_SRC

***** Better solution
A better solution using ${\cal O}(n)$ space.

#+BEGIN_SRC cpp
  #include<vector>
  #include<iostream>
  using namespace std;
  typedef long long int lli;

  int main() {
    int n, m;
    cin >> n >> m;
    vector<int> coins(m);
    for (int i=0; i<m; i++)
      cin >> coins[i];

    vector<lli> ways(n+1,0);
    ways[0] = 1;

    for (int i=0; i < coins.size(); i++)
      for (int j=coins[i]; j < ways.size(); j++)
        ways[j] += ways[j-coins[i]];

    cout << ways[n];
  }
#+END_SRC
**** Bit manipulation: Lonely integer
Folds using =xor=. Every element will be cancelled out with its pair,
except for the result.

#+BEGIN_SRC c++
#include <vector>
#include <iostream>
using namespace std;

int lonely_integer(vector < int > a) {
    int result = 0;
    for (int i=0; i<a.size(); i++)
        result ^= a[i];
    return result;
}

int main(){
    int n;
    cin >> n;
    vector<int> a(n);
    for(int a_i = 0;a_i < n;a_i++){
       cin >> a[a_i];
    }
    cout << lonely_integer(a) << endl;
    return 0;
}
#+END_SRC
** HourRank 15
*** Cats and a mouse
    #+BEGIN_SRC cpp
      using namespace std;

      int main(){
        int q;
        cin >> q;
        for(int a0 = 0; a0 < q; a0++){
          int x;
          int y;
          int z;
          cin >> x >> y >> z;
        
          if (abs(z-x) < abs(z-y))
    	cout << "Cat A";
          else if (abs(z-x) > abs(z-y))
    	cout << "Cat B";
          else
    	cout << "Mouse C";
          cout << endl;
        }
    

        
        return 0;
      }
    #+END_SRC
*** Gaming array sum
    #+BEGIN_SRC cpp
      #include <vector>
      #include <climits>
      #include <cstring>
      #include <cstdlib>
      #include <fstream>
      #include <numeric>
      #include <sstream>
      #include <iostream>
      #include <algorithm>
      #include <unordered_map>

      using namespace std;


      int main(){
        int g;
        cin >> g;
        for(int a0 = 0; a0 < g; a0++){
          int n;
          cin >> n;
          vector<int> numbers;
          for (int i=0; i<n; i++) {
    	int read; cin >> read;
    	numbers.push_back(read);   
          }
        
          int counter = 0;
          int max = 0;
          for (int j=0; j<n; j++) {
    	if (numbers[j] > max) {
    	  counter++;
    	  max = numbers[j];
    	}
          }
        
          if (counter % 2 == 0)
    	cout << "ANDY";
          else
    	cout << "BOB";
          cout << endl;
        }
        return 0;
      }
    #+END_SRC
*** Tara's Beautiful Permutations
    #+BEGIN_SRC cpp
      #include <cmath>
      #include <cstdio>
      #include <vector>
      #include <unordered_set>
      #include <iostream>
      #include <algorithm>
      using namespace std;
      const int MOD = 1000000007;
      typedef long long int lli;

      lli phi(vector< vector<lli> >& results, int n, int k) {
        if (results[n][k] != -1)
          return results[n][k];
    
        lli sol;
        if (k == 0)
          sol = (n * phi(results,n-1,0)) % MOD;
        else {
          lli u = phi(results,n,k-1);
          sol = ((u + (u%2)*MOD)/2 - phi(results,n-1,k-1) + MOD) % MOD;
        }
        results[n][k] = sol;
        return sol;
      }

      int main() {
        vector< vector<lli> > results(2001,vector<lli>(1001,-1));
        results[0][0] = 1;
    
        int cases; cin >> cases;
        for (int i=0; i<cases; i++) {
          unordered_set<int> counter;
          int k = 0;
          int n; cin >> n;
          for (int i=0; i<n; i++) {
    	int read; cin >> read;
    	if (counter.find(read) != counter.end())
    	  k++;
    	else
    	  counter.insert(read);
          }
        
          cout << phi(results,n,k) << endl;
        }
    
        return 0;
      }
    #+END_SRC
* Leetcode
** DONE 84. Largest Rectangle in Histogram
** DONE 412. Fizz Buzz
** DONE 441. Arranging Coins
* Interview problems
** Google example interview
Taken from [[https://www.youtube.com/watch?v=XKu_SEDAykw][this youtube video]]:

#+BEGIN_SRC cpp
  bool HasPairWithSum (vector<int>& numbers, int sum) {
    unordered_set<int> complements;

    for (int n : numbers) {
      if (complements.find(n) != complements.end())
        return true;
      complements.add(sum-n);
    }

    return false;
  }
#+END_SRC

* Python Kung-fu
From the [[https://github.com/PythonGranada/python-kung-fu/][Python Kung-fu repository]].

** 0. String permutation
Using a vector as a sort of a hash, running in ${\cal O}(n)$.

#+BEGIN_SRC cpp :cmdline <<< 'asdf fsda'
  #include<vector>
  #include<string>
  #include<iostream>
  using namespace std;

  bool is_permutation(string a, string b) {
      vector<int> counter(26,0);
      for (char c : a)
          counter[c-'a']++;
      for (char c : b)
          counter[c-'a']--;

      for (int ocurrences : counter)
          if (ocurrences != 0)
              return false;

      return true;
  }

  int main() {
    string a,b;
    cin >> a >> b;
  
    // Checking that the two sizes are equal discards a lot of
    // edge cases.
    if (a.size() == b.size() and is_permutation(a,b))
      cout << "Permutation";
    else
      cout << "Not a permutation";
  }
#+END_SRC

#+RESULTS:
: Permutation

** 1. Unique characters
*** With a boolean vector
#+BEGIN_SRC cpp :cmdline <<< 'afsgdf'
  #include<vector>
  #include<iostream>
  #include<string>
  #include<stdint.h>
  using namespace std;

  bool unique_chars(string str) {
    if (str.size() > 26)
      return false;

    int32_t counter = 0;
    for (char c : str)
      if ((counter & (1 << (c-'a'))) != 0)
        return false;
      else
        counter |= (1 << (c-'a'));
    return true;
  }

  int main() {
    string str;
    cin >> str;

    if (unique_chars(str))
      cout << "Unique characters";
    else
      cout << "Repeated characters";
  }
#+END_SRC

#+RESULTS:
: Repeated characters

*** Without additional data structures
#+BEGIN_SRC cpp :cmdline <<< 'afsgdf'
  #include<vector>
  #include<algorithm>
  #include<iostream>
  using namespace std;

  bool unique_chars(string str) {
    if (str.size() > 26)
      return false;
    
    make_heap(str.begin(), str.end());
    sort_heap(str.begin(), str.end());
    for (int i=0; i<str.size()-1; i++)
      if (str[i] == str[i+1])
        return false;

    return true;
  }

  int main() {
    string str;
    cin >> str;

    if (unique_chars(str))
      cout << "Unique characters";
    else
      cout << "Repeated characters";
  }
#+END_SRC

#+RESULTS:
: Repeated characters
* Algorithms
** Sorting
*** Bubble sort
An average performance of ${\cal O}(n^2)$.

**** C++ Implementation
#+BEGIN_SRC cpp :cmdline <<< '9 5 7 3 6 2 8 4 1'
  #include<iostream>
  #include<vector>
  using namespace std;

  void bubblesort(vector<int>& arr) {
    for (unsigned i=0; i<arr.size(); i++) {
      for (unsigned j=0; j<arr.size()-i-1; j++) {
        if (arr[j] > arr[j+1]) {
          int swap = arr[j];
          arr[j] = arr[j+1];
          arr[j+1] = swap;
        }
      }
    }
  }


  int main() {
    vector<int> numbers;
    int read;

    while (cin >> read) {
      numbers.push_back(read);
    }

    bubblesort(numbers);

    for (int n : numbers) {
      cout << n << " ";
    }
  }
#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7 8 9

*** Quicksort
An average performance of ${\cal O}(n \log(n))$, but the worst-case performance is of ${\cal O}(n^2)$.

**** C++ Implementation
:cmdline <<< '9 5 7 3 6 2 8 4 1'
#+BEGIN_SRC cpp :cmdline <<< '7 6 5 4 3 2 1'
  #include<iostream>
  #include<vector>
  using namespace std;

  void quicksort(vector<int>& numbers, int left, int right) {
    if (left >= right)
      return;

    int i = left+1;
    int j = right;
    int pivot = numbers[left];

    while (i <= j) {
      while (numbers[i] < pivot)
        i++;
      while (numbers[j] > pivot)
        j--;
      if (i < j) {
        int swap = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = swap;
      }
    }

    numbers[left] = numbers[j];
    numbers[j] = pivot;
    quicksort(numbers, left, j-1);
    quicksort(numbers, j+1, right);
  }

  int main() {
    int read;
    vector<int> numbers;
    while (cin >> read)
      numbers.push_back(read);

    quicksort(numbers,0,numbers.size()-1);

    for (int n : numbers)
      cout << n << " ";
  }
#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7

**** Haskell Implementation
#+BEGIN_SRC haskell :results output
  input :: [Int]
  input = [9,5,8,3,7,4,1,2,6]

  quicksort :: (Ord a) => [a] -> [a]
  quicksort [] = []
  quicksort (x:xs) =
    quicksort (filter (<=x) xs) ++
    [x] ++
    quicksort (filter (>=x) xs)

  main :: IO ()
  main = do
    print $ quicksort input
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9]

*** Mergesort
**** C++ Implementation
Mergesort has an average performance of ${\cal O}(n \log(n))$, where $n$ is the size of the arrray.
We can compute that visualizing a diagram of mergesort. To merge a level into other is lineal
in time, and to sort a level depends on the numbers of levels below it; if we think of the
diagram as a tree, it has $\log(n)$ levels.
#+BEGIN_SRC cpp :cmdline <<< '8 6 2 4 7 1 5 9 3'
  #include<iostream>
  #include<vector>
  using namespace std;

  void merge(vector<int>& arr, int left, int middle, int right) {
    vector<int> auxiliar;
    for (int i=left; i<right; i++)
      auxiliar.push_back(arr[i]);

    int rel_left = left-left;
    int rel_right = right-left;
    int rel_middle = middle-left;
    int i = rel_left;
    int j = rel_middle;
    int a = left;

    while (i < rel_middle and j < rel_right) {
      if (auxiliar[i] < auxiliar[j]) {
        arr[a] = auxiliar[i];
        i++; a++;
      }
      else {
        arr[a] = auxiliar[j];
        j++; a++;
      }
    }

    while (i < rel_middle) {
      arr[a] = auxiliar[i];
      i++; a++;
    }

    while (j < rel_right) {
      arr[a] = auxiliar[j];
      j++; a++;
    }
  }

  void mergesort(vector<int>& arr, int left, int right) {
    if (left >= right-1)
      return;

    int middle = (left+right)/2;
    mergesort(arr, left, middle);
    mergesort(arr, middle, right);
    merge(arr, left, middle, right);
  }

  int main() {
    vector<int> numbers;
    int read;
    while (cin >> read)
      numbers.push_back(read);

    mergesort(numbers, 0, numbers.size());

    for (int n : numbers) {
      cout << n << " ";
    }
  }

#+END_SRC

#+RESULTS:
: 1 2 3 4 5 6 7 8 9

**** Haskell implementation
#+BEGIN_SRC haskell :results output
  merge :: (Ord a) => [a] -> [a] -> [a]
  merge [] ys = ys
  merge xs [] = xs
  merge (x:xs) (y:ys)
      | x < y = x:(merge xs (y:ys))
      | otherwise = y:(merge (x:xs) ys)

  mergesort :: (Ord a) => [a] -> [a]
  mergesort [] = []
  mergesort [x] = [x]
  mergesort xs = merge (mergesort fs) (mergesort ls)
      where (fs,ls) = splitAt middle xs
            middle = div (length xs) 2

  main :: IO ()
  main = print $ mergesort input
  
  input :: [Int]
  input = [9,5,8,2,4,7,6,1,3,10]
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9,10]

*** Heapsort
It runs in ${\cal O}(n \log n)$.
**** Haskell library implementation
#+BEGIN_SRC haskell :results output
import Data.Heap as Heap

heapsort :: (Ord a) => [a] -> [a]
heapsort = Heap.sort

main :: IO ()
main = print $ heapsort input

input :: [Int]
input = [7,1,4,9,2,6,3,5,8]
#+END_SRC

#+RESULTS:
: [1,2,3,4,5,6,7,8,9]

** Data Structures
*** TODO Monoids and Finger Trees
**** Finger Trees
This code is based upon the article: [[http://apfelmus.nfshost.com/articles/monoid-fingertree.html][Monoids and fingertrees]] by Apfelmus.

#+BEGIN_SRC haskell :results output
  data Tree v a = Leaf v a
                | Branch v (Tree v a) (Tree v a)

  toList :: Tree v a -> [a]
  toList (Leaf _ x) = [x]
  toList (Branch _ xt yt) = toList xt ++ toList yt

  tag :: Tree v a -> v
  tag (Leaf v _) = v
  tag (Branch v _ _) = v


  -- Size trees with special constructors
  type Size = Int

  leaf :: a -> Tree Size a
  leaf x = Leaf 1 x

  branch :: Tree Size a -> Tree Size a -> Tree Size a
  branch xt yt = Branch (tag xt + tag yt) xt yt

  (!) :: Tree Size a -> Int -> a
  (!) (Leaf _ a) 0 = a
  (!) (Branch _ xt yt) n 
      | n < tag xt = xt ! n
      | otherwise  = yt ! (n - tag xt)

  fromList :: [a] -> Tree Size a
  fromList [x] = leaf x
  fromList xs = branch (fromList fh) (fromList sh)
      where
        (fh,sh) = splitAt (length xs `div` 2) xs


  -- Priority queue
  type Priority = Int

  leafp :: a -> Priority -> Tree Priority a
  leafp x p = Leaf p x

  branchp :: Tree Priority a -> Tree Priority a -> Tree Priority a
  branchp lt rt = Branch (min (tag lt) (tag rt)) lt rt

  winner :: Tree Priority a -> a
  winner (Leaf _ a) = a
  winner t@(Branch _ x y)
    | tag t == tag x = winner x
    | otherwise      = winner y

  fromListp :: [(a,Priority)] -> Tree Priority a
  fromListp [(x,p)] = leafp x p
  fromListp xs = branchp (fromListp fh) (fromListp sh)
      where
        (fh,sh) = splitAt (length xs `div` 2) xs


  -- Example main
  main :: IO ()
  main = do
    print $ fromList [7,5,2,6,4,9,1,3,8] ! 5
    print $ winner $ fromListp [("a",5),("b",7),("c",3),("d",4)]
#+END_SRC

#+RESULTS:
: 9
: c

**** Monoidal abstraction
We can abstract this into a monoid:

#+BEGIN_SRC haskell :results output

#+END_SRC

